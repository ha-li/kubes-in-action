minikube is a binary that allows you to run a single instance kubernetes cluster
-it is great for testing kubernetes and developing apps locally

best documentation for installing minikube is here
https://github.com/kubernetes/minikube

to start minikube:
   > minikube start

to stop minikube:
   > minikube stop

to ssh into minikube:
   > minikube ssh

to get the dashboard for minikube
   > minikube dashboard

=======================

To interact with Kubernetes, you will need kubectl cli client.
To install kubectl, run:
   > curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/darwin/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/

   to see the components of your cluster:
   > kubectl cluster-info

   to see all the nodes in your cluster:
   > kubectl get nodes

   to describe a node
   > kubectl describe node <node-name>

   to run an docker image on kubernetes cluster (for a replication controller)
   > kubectl run kubia --image=haja/kubia --port=8080 --generator=run/v1

   to get all the pods
   > kubectl get pods

   to describe a pod
   > kubectl describe pod <pod-name>

   to get the service objects
   > kubectl get services

   to get the number of replication controllers
   > kubectl get rc
 
   to scale the replica pods
   > kubectl scale rc <name> --replicas=3 
      eg: kubectl scale rc kubia --replicas=3   (creates 3 pods)

   to describe a pod
   > kubectl describe pod <pod id>

   to create a load balancer (rc = replicationcontroller) (minikube does not support LoadBalancer service)
   > kubectl expose rc kubia --type=LoadBalancer --name kubia-http

   minikube does not support the LoadBalancer type service, so to get the ip address of the service
   > minikube service kubia-http (kubia-http is the name returned by kubectl get services)

kubernetes does not run individual containers, rather, it runs them inside pods. so containers can
be co-located in pods. 

a node has 1 or more pods.
each pod has its own ip address.
a pod can have 1 or more containner.

when you run kubectl run to deploy a node (on some central deployment machine), 
this sends an HTTP request to the Kubernetes API server to create a ReplicationController.
The ReplicationController creates a new pod, which gets scheduled to one of the worker nodes by the Scheduler.
The Kubelet on that node sees a pod was scheduled to it, does a docker pull command to retrive the Docker image and
create a new container and run it.
 ( scheduling means assigning a pod to a node to be run immediately)

even though each pod has it's own ip address
 
